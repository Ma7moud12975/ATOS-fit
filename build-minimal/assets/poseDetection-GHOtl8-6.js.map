{"version":3,"file":"poseDetection-GHOtl8-6.js","sources":["../../src/utils/poseDetection.js"],"sourcesContent":["// Pose detection utilities using MediaPipe\nclass PoseDetectionUtils {\n  constructor() {\n    this.pose = null;\n    this.isInitialized = false;\n    this.pushupState = 'up'; // up, down, transition\n    this.pushupCount = 0;\n    this.highKneesCount = 0;\n    this.postureStatus = 'unknown'; // correct, incorrect, unknown\n    this.lastWarningTime = 0;\n    this.videoDimensionsLogged = false;\n    // Exercise mode and timing\n    this.exerciseMode = 'pushups'; // 'pushups' | 'plank' | 'squats' | 'lunges'\n    this.accumulatedCorrectMs = 0;\n    this.timerRunning = false;\n    this.startCorrectTimestampMs = 0;\n    this.onPushupCount = null;\n    this.onPostureChange = null;\n    this.onFormFeedback = null;\n    this.onTimeUpdate = null; // for plank seconds updates\n  }\n\n  setExerciseMode(mode) {\n    const normalized = String(mode || '').toLowerCase();\n    if (normalized === 'plank') this.exerciseMode = 'plank';\n    else if (normalized === 'squats' || normalized === 'squat') this.exerciseMode = 'squats';\n    else if (normalized === 'lunges' || normalized === 'lunge') this.exerciseMode = 'lunges';\n    else if (normalized === 'burpees' || normalized === 'burpee') this.exerciseMode = 'burpees';\n    else if (normalized.includes('mountain') || normalized.includes('climber')) this.exerciseMode = 'mountainclimbers';\n    else if (normalized.includes('high') && normalized.includes('knees')) this.exerciseMode = 'highknees';\n    else this.exerciseMode = 'pushups';\n  }\n\n  // Initialize MediaPipe Pose\n  async initialize() {\n    try {\n      console.log('üöÄ Initializing MediaPipe Pose...');\n      \n      // Wait for MediaPipe to load if not ready\n      if (!window.Pose) {\n        console.warn('MediaPipe Pose not loaded yet, waiting...');\n        // Wait up to 10 seconds for MediaPipe to load\n        let attempts = 0;\n        while (!window.Pose && attempts < 50) {\n          await new Promise(resolve => setTimeout(resolve, 200));\n          attempts++;\n          if (attempts % 10 === 0) {\n            console.log(`Still waiting for MediaPipe... (${attempts * 200}ms)`);\n          }\n        }\n        \n        if (!window.Pose) {\n          console.error('MediaPipe Pose failed to load after waiting');\n          return false;\n        }\n      }\n      \n      console.log('‚úÖ MediaPipe Pose found in window object');\n\n      this.pose = new window.Pose({\n        locateFile: (file) => {\n          return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n        }\n      });\n\n      const config = window.MediaPipeConfig?.POSE_CONFIG || {\n        modelComplexity: 0,\n        smoothLandmarks: true,\n        enableSegmentation: false,\n        smoothSegmentation: false,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      };\n\n      this.pose.setOptions(config);\n      this.pose.onResults(this.onResults.bind(this));\n      \n      this.isInitialized = true;\n      console.log('MediaPipe Pose initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize MediaPipe Pose:', error);\n      return false;\n    }\n  }\n\n  // Process video frame\n  async processFrame(videoElement) {\n    if (!this.isInitialized || !this.pose) {\n      console.log('‚ùå Pose not initialized or missing');\n      return null;\n    }\n\n    try {\n      // Only log occasionally to avoid spam\n      if (Math.random() < 0.05) {\n        console.log('üìπ Processing frame...');\n      }\n      \n      // Check if video dimensions are reasonable\n      if (videoElement.videoWidth === 0 || videoElement.videoHeight === 0) {\n        if (Math.random() < 0.1) {\n          console.log('‚è≥ Video dimensions not ready yet');\n        }\n        return;\n      }\n      \n      // Log video dimensions only once per session\n      if (!this.videoDimensionsLogged) {\n        console.log(`üìè Video dimensions: ${videoElement.videoWidth}x${videoElement.videoHeight}`);\n        this.videoDimensionsLogged = true;\n      }\n      \n      // Allow larger videos but with a reasonable limit\n      const maxWidth = 1920;\n      const maxHeight = 1080;\n      if (videoElement.videoWidth > maxWidth || videoElement.videoHeight > maxHeight) {\n        console.log('‚ö†Ô∏è Video too large (>1920x1080), skipping frame');\n        return;\n      }\n      \n      await this.pose.send({ image: videoElement });\n    } catch (error) {\n      if (error.message?.includes('memory access out of bounds')) {\n        console.warn('üîÑ Memory error, skipping frame');\n        return;\n      }\n      console.error('Error processing frame:', error);\n    }\n  }\n\n  // Handle pose detection results\n  onResults(results) {\n    console.log('üéØ onResults called!', results.poseLandmarks ? `Found ${results.poseLandmarks.length} landmarks` : 'No landmarks');\n    \n    // Store results for drawing\n    this.lastResults = results;\n    \n    if (!results.poseLandmarks) {\n      this.postureStatus = 'unknown';\n      if (this.onPostureChange) {\n        this.onPostureChange('unknown', null);\n      }\n      // Stop plank timer if running\n      if (this.timerRunning) {\n        this.accumulatedCorrectMs += Date.now() - this.startCorrectTimestampMs;\n        this.timerRunning = false;\n        this.startCorrectTimestampMs = 0;\n        if (this.onTimeUpdate) {\n          this.onTimeUpdate(Math.floor(this.accumulatedCorrectMs / 1000));\n        }\n      }\n      return;\n    }\n\n    const landmarks = results.poseLandmarks;\n    \n    // For squats, lunges, pushups, burpees: always show correct posture to avoid confusion\n    if (this.exerciseMode === 'squats' || this.exerciseMode === 'lunges' || this.exerciseMode === 'pushups' || this.exerciseMode === 'burpees') {\n      this.postureStatus = 'correct';\n      if (this.onPostureChange) {\n        this.onPostureChange('correct', landmarks);\n      }\n    } else {\n      // Check posture for other exercises\n      const isPostureCorrect = this.checkBackAlignment(landmarks);\n      const newPostureStatus = isPostureCorrect ? 'correct' : 'incorrect';\n      \n      if (newPostureStatus !== this.postureStatus) {\n        this.postureStatus = newPostureStatus;\n        if (this.onPostureChange) {\n          this.onPostureChange(this.postureStatus, landmarks);\n        }\n      }\n\n      // Handle posture warnings for plank only (pushups now work like squats/lunges)\n      if (!isPostureCorrect) {\n        const currentTime = Date.now();\n        const cooldown = window.MediaPipeConfig?.PLANK_CONFIG?.WARNING_COOLDOWN || 2000;\n        \n        if (currentTime - this.lastWarningTime > cooldown) {\n          this.playWarningSound();\n          this.lastWarningTime = currentTime;\n          \n          if (this.onFormFeedback) {\n            this.onFormFeedback({\n              message: \"Dangerous posture - straighten your back!\",\n              type: \"warning\",\n              timestamp: currentTime\n            });\n          }\n        }\n        // Stop plank timer while incorrect\n        if (this.exerciseMode === 'plank' && this.timerRunning) {\n          this.accumulatedCorrectMs += currentTime - this.startCorrectTimestampMs;\n          this.timerRunning = false;\n          this.startCorrectTimestampMs = 0;\n          if (this.onTimeUpdate) {\n            this.onTimeUpdate(Math.floor(this.accumulatedCorrectMs / 1000));\n          }\n        }\n        return; // Don't count reps with bad posture for plank only\n      }\n    }\n\n    // Posture is correct\n    if (this.exerciseMode === 'plank') {\n      const now = Date.now();\n      if (!this.timerRunning) {\n        this.startCorrectTimestampMs = now;\n        this.timerRunning = true;\n      }\n      const totalMs = this.accumulatedCorrectMs + (now - (this.startCorrectTimestampMs || now));\n      const seconds = Math.floor(totalMs / 1000);\n      if (this.onTimeUpdate) this.onTimeUpdate(seconds);\n      return;\n    }\n\n    // Count reps depending on mode\n      if (this.exerciseMode === 'squats') {\n        this.updateSquatCounter(landmarks);\n      } else if (this.exerciseMode === 'lunges') {\n        this.updateLungesCounter(landmarks);\n      } else if (this.exerciseMode === 'burpees') {\n        this.updateBurpeesCounter(landmarks);\n      } else if (this.exerciseMode === 'mountainclimbers') {\n        this.updateMountainClimbersCounter(landmarks);\n      } else if (this.exerciseMode === 'highknees') {\n        this.updateHighKneesCounter(landmarks);\n      } else {\n        this.updatePushupCounter(landmarks);\n      }\n  }\n\n  // Calculate angle between three points\n  calculateAngle(point1, point2, point3) {\n    const radians = Math.atan2(point3.y - point2.y, point3.x - point2.x) - \n                   Math.atan2(point1.y - point2.y, point1.x - point2.x);\n    let angle = Math.abs(radians * 180.0 / Math.PI);\n    \n    if (angle > 180.0) {\n      angle = 360 - angle;\n    }\n    \n    return angle;\n  }\n\n  // Check back alignment for posture\n  checkBackAlignment(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      \n      const leftShoulder = landmarks[config.LEFT_SHOULDER || 11];\n      const rightShoulder = landmarks[config.RIGHT_SHOULDER || 12];\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const rightHip = landmarks[config.RIGHT_HIP || 24];\n      const leftKnee = landmarks[config.LEFT_KNEE || 25];\n      const rightKnee = landmarks[config.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[config.RIGHT_ANKLE || 28];\n\n      // Require visibility. For plank allow side-view (one side) visibility; for other exercises require both sides for stability.\n      const vis = (p) => p && (p.visibility == null || p.visibility > 0.5);\n      if (this.exerciseMode === 'plank') {\n        const leftSideOk = vis(leftShoulder) && vis(leftHip);\n        const rightSideOk = vis(rightShoulder) && vis(rightHip);\n        if (!leftSideOk && !rightSideOk) {\n          // Not enough landmarks to evaluate plank reliably\n          return false;\n        }\n      } else {\n        if (!vis(leftShoulder) || !vis(rightShoulder) || !vis(leftHip) || !vis(rightHip) || !vis(leftKnee) || !vis(rightKnee)) {\n          return false;\n        }\n      }\n\n      // Calculate center points\n      const shoulderCenter = {\n        x: (leftShoulder.x + rightShoulder.x) / 2,\n        y: (leftShoulder.y + rightShoulder.y) / 2\n      };\n      \n      const hipCenter = {\n        x: (leftHip.x + rightHip.x) / 2,\n        y: (leftHip.y + rightHip.y) / 2\n      };\n      \n      const kneeCenter = {\n        x: (leftKnee.x + rightKnee.x) / 2,\n        y: (leftKnee.y + rightKnee.y) / 2\n      };\n      const ankleCenter = (vis(leftAnkle) && vis(rightAnkle)) ? {\n        x: (leftAnkle.x + rightAnkle.x) / 2,\n        y: (leftAnkle.y + rightAnkle.y) / 2\n      } : null;\n\n      // Vectors for straightness\n      const targetPoint = ankleCenter || kneeCenter;\n      const v1 = { x: shoulderCenter.x - hipCenter.x, y: shoulderCenter.y - hipCenter.y };\n      const v2 = targetPoint ? { x: targetPoint.x - hipCenter.x, y: targetPoint.y - hipCenter.y } : null;\n\n      let isGoodPosture = false;\n      if (this.exerciseMode === 'plank') {\n        // Plank: support both front-facing and side-view evaluation.\n        const cfg = window.MediaPipeConfig?.PLANK_CONFIG || {};\n\n        // Prefer side-view detection when one full side is visible (shoulder, hip, ankle)\n        const leftSideVisible = vis(leftShoulder) && vis(leftHip) && vis(leftAnkle);\n        const rightSideVisible = vis(rightShoulder) && vis(rightHip) && vis(rightAnkle);\n\n        if (leftSideVisible || rightSideVisible) {\n          const shoulder = leftSideVisible ? leftShoulder : rightShoulder;\n          const hip = leftSideVisible ? leftHip : rightHip;\n          const ankle = leftSideVisible ? leftAnkle : rightAnkle;\n\n          // Angle at hip between shoulder-hip-ankle: near 180¬∞ for a straight plank\n          const sideAngle = this.calculateAngle(shoulder, hip, ankle);\n          const minSideAngle = cfg.MIN_SIDE_ANGLE ?? 155; // degrees\n\n          isGoodPosture = sideAngle >= minSideAngle;\n\n          // optional knee check when both ankles visible\n          if (isGoodPosture && ankleCenter) {\n            const leftKneeAngle = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n            const rightKneeAngle = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n            const kneeMin = cfg.KNEE_MIN_DEG ?? 150;\n            const kneeOk = (leftKneeAngle >= kneeMin) && (rightKneeAngle >= kneeMin);\n            isGoodPosture = isGoodPosture && kneeOk;\n          }\n\n        } else {\n          // Fallback: use center-based straightness + orientation as before (front-facing)\n          let cosSim = -1;\n          if (v2) {\n            const mag1 = Math.hypot(v1.x, v1.y) || 1;\n            const mag2 = Math.hypot(v2.x, v2.y) || 1;\n            cosSim = (v1.x * v2.x + v1.y * v2.y) / (mag1 * mag2);\n          }\n          const absCos = Math.abs(Math.max(-1, Math.min(1, cosSim)));\n          const straightEnough = v2 ? (absCos >= (cfg.STRAIGHT_ABS_COS_MIN ?? 0.90)) : false;\n          const dx = shoulderCenter.x - hipCenter.x;\n          const dy = shoulderCenter.y - hipCenter.y;\n          const orientDeg = Math.abs(Math.atan2(dy, dx) * 180 / Math.PI);\n          const horizMax = cfg.HORIZ_MAX_DEG ?? 35;\n          const nearHorizontal = (orientDeg <= horizMax) || (orientDeg >= (180 - horizMax));\n          let kneeOk = true;\n          if (ankleCenter) {\n            const leftKneeAngle = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n            const rightKneeAngle = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n            const kneeMin = cfg.KNEE_MIN_DEG ?? 150;\n            kneeOk = (leftKneeAngle >= kneeMin) && (rightKneeAngle >= kneeMin);\n          }\n          isGoodPosture = straightEnough && nearHorizontal && kneeOk;\n        }\n\n      } else if (this.exerciseMode === 'squats') {\n        // Squats: ensure hip angle not collapsed and torso tilt within range\n        const scfg = window.MediaPipeConfig?.SQUAT_CONFIG || {};\n        const hipAngleLeft = this.calculateAngle(leftShoulder, leftHip, leftKnee);\n        const hipAngleRight = this.calculateAngle(rightShoulder, rightHip, rightKnee);\n        const hipAngle = (hipAngleLeft + hipAngleRight) / 2;\n        const hipAngleMin = scfg.HIP_ANGLE_MIN ?? 150;\n        const dx = shoulderCenter.x - hipCenter.x;\n        const dy = shoulderCenter.y - hipCenter.y;\n        const torsoTiltDeg = Math.abs(Math.atan2(dx, -dy) * 180 / Math.PI);\n        const tiltMax = scfg.TORSO_TILT_MAX ?? 45;\n        isGoodPosture = (hipAngle >= hipAngleMin) && (torsoTiltDeg <= tiltMax);\n      } else {\n        // Push-ups: straight line check using abs(cos)\n        let cosSim = -1;\n        if (v2) {\n          const mag1 = Math.hypot(v1.x, v1.y) || 1;\n          const mag2 = Math.hypot(v2.x, v2.y) || 1;\n          cosSim = (v1.x * v2.x + v1.y * v2.y) / (mag1 * mag2);\n        }\n        const absCos = Math.abs(Math.max(-1, Math.min(1, cosSim)));\n        isGoodPosture = v2 ? (absCos >= 0.90) : false;\n      }\n\n      console.log(`üèÉ Posture(${this.exerciseMode}): ${isGoodPosture ? 'GOOD' : 'BAD'}`);\n      \n      return isGoodPosture;\n    } catch (error) {\n      console.error('Error checking back alignment:', error);\n      return false;\n    }\n  }\n\n  // Update push-up counter\n  updatePushupCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const pushupConfig = window.MediaPipeConfig?.PUSHUP_CONFIG || {};\n      \n      const leftShoulder = landmarks[config.LEFT_SHOULDER || 11];\n      const leftElbow = landmarks[config.LEFT_ELBOW || 13];\n      const leftWrist = landmarks[config.LEFT_WRIST || 15];\n      const rightShoulder = landmarks[config.RIGHT_SHOULDER || 12];\n      const rightElbow = landmarks[config.RIGHT_ELBOW || 14];\n      const rightWrist = landmarks[config.RIGHT_WRIST || 16];\n\n      if (!leftShoulder || !leftElbow || !leftWrist || !rightShoulder || !rightElbow || !rightWrist) {\n        return;\n      }\n\n      // Calculate elbow angles\n      const leftElbowAngle = this.calculateAngle(leftShoulder, leftElbow, leftWrist);\n      const rightElbowAngle = this.calculateAngle(rightShoulder, rightElbow, rightWrist);\n      const avgElbowAngle = (leftElbowAngle + rightElbowAngle) / 2;\n\n      // Average shoulder position (for height detection)\n      const avgShoulderY = (leftShoulder.y + rightShoulder.y) / 2;\n\n      const downThreshold = pushupConfig.ELBOW_ANGLE_DOWN || 95;\n      const upThreshold = pushupConfig.ELBOW_ANGLE_UP || 155;\n      const shoulderHeightThreshold = pushupConfig.SHOULDER_HEIGHT_DOWN || 0.02;\n\n      // Push-up position: elbows bent OR shoulders close to ground\n      const pushupPosition = (avgElbowAngle <= downThreshold) || (avgShoulderY >= (1 - shoulderHeightThreshold));\n      \n      // Standing position: elbows straight\n      const standingPosition = avgElbowAngle >= upThreshold;\n\n      // Simple counting: count immediately when going down (like squats and lunges)\n      if (this.pushupState === 'up') {\n        if (pushupPosition) {\n          this.pushupState = 'down';\n          this.pushupCount += 1; // Count immediately on descent\n          this.playSuccessSound(); // Play success sound\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Push-up ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (standingPosition) {\n          this.pushupState = 'up'; // Reset state for next rep\n        }\n      }\n    } catch (error) {\n      console.error('Error updating push-up counter:', error);\n    }\n  }\n\n  // Update squat counter\n  updateSquatCounter(landmarks) {\n    try {\n      const cfg = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const scfg = window.MediaPipeConfig?.SQUAT_CONFIG || {};\n\n      const leftHip = landmarks[cfg.LEFT_HIP || 23];\n      const rightHip = landmarks[cfg.RIGHT_HIP || 24];\n      const leftKnee = landmarks[cfg.LEFT_KNEE || 25];\n      const rightKnee = landmarks[cfg.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[cfg.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[cfg.RIGHT_ANKLE || 28];\n      const leftShoulder = landmarks[cfg.LEFT_SHOULDER || 11];\n      const rightShoulder = landmarks[cfg.RIGHT_SHOULDER || 12];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle || !leftShoulder || !rightShoulder) return;\n\n      // Average sides for stability\n      const hip = { x: (leftHip.x + rightHip.x) / 2, y: (leftHip.y + rightHip.y) / 2 };\n      const knee = { x: (leftKnee.x + rightKnee.x) / 2, y: (leftKnee.y + rightKnee.y) / 2 };\n      const ankle = { x: (leftAnkle.x + rightAnkle.x) / 2, y: (leftAnkle.y + rightAnkle.y) / 2 };\n      const shoulder = { x: (leftShoulder.x + rightShoulder.x) / 2, y: (leftShoulder.y + rightShoulder.y) / 2 };\n\n      // Knee angle using hip-knee-ankle\n      const kneeAngleLeft = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n      const kneeAngleRight = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n      const kneeAngle = (kneeAngleLeft + kneeAngleRight) / 2;\n\n      // Hip angle shoulder-hip-knee to detect rounding/collapse\n      const hipAngleLeft = this.calculateAngle(leftShoulder, leftHip, leftKnee);\n      const hipAngleRight = this.calculateAngle(rightShoulder, rightHip, rightKnee);\n      const hipAngle = (hipAngleLeft + hipAngleRight) / 2;\n\n      const downThreshold = scfg.KNEE_ANGLE_DOWN ?? 80;\n      const upThreshold = scfg.KNEE_ANGLE_UP ?? 165;\n      const hipAngleMin = scfg.HIP_ANGLE_MIN ?? 150;\n\n      // Count based on hip position (lower back points)\n      const hipY = hip.y; // Y position of hips (lower = deeper)\n      const kneeY = knee.y; // Y position of knees\n      \n      // Hip goes below knee level = deep squat\n      const hipBelowKnee = hipY > kneeY;\n      // Hip goes back up above knee level = standing\n      const hipAboveKnee = hipY < kneeY;\n\n      // State machine: count when hip goes down below knee level\n      if (this.pushupState === 'up') {\n        if (hipBelowKnee) {\n          this.pushupState = 'down';\n          this.pushupCount += 1;\n          this.playSuccessSound(); // Play success sound\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Squat ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (hipAboveKnee) {\n          this.pushupState = 'up';\n        }\n      }\n    } catch (error) {\n      console.error('Error updating squat counter:', error);\n    }\n  }\n\n  // Update lunges counter\n  updateLungesCounter(landmarks) {\n    try {\n      const cfg = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const lcfg = window.MediaPipeConfig?.LUNGES_CONFIG || {};\n      const leftHip = landmarks[cfg.LEFT_HIP || 23];\n      const rightHip = landmarks[cfg.RIGHT_HIP || 24];\n      const leftKnee = landmarks[cfg.LEFT_KNEE || 25];\n      const rightKnee = landmarks[cfg.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[cfg.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[cfg.RIGHT_ANKLE || 28];\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n      // Average hip position\n      const hip = { x: (leftHip.x + rightHip.x) / 2, y: (leftHip.y + rightHip.y) / 2 };\n      // Calculate knee angles\n      const leftKneeAngle = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n      const rightKneeAngle = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n      // Determine which leg is front (more bent knee)\n      const leftKneeBent = leftKneeAngle < rightKneeAngle;\n      const frontKnee = leftKneeBent ? leftKnee : rightKnee;\n      const backKnee = leftKneeBent ? rightKnee : leftAnkle;\n      const frontKneeAngle = leftKneeBent ? leftKneeAngle : rightKneeAngle;\n      const backKneeAngle = leftKneeBent ? rightKneeAngle : leftKneeAngle;\n      // Hip position relative to front knee\n      const hipBelowFrontKnee = hip.y > frontKnee.y;\n      // Lunge position: either knee bent enough OR hips go down (very lenient)\n      const lungePosition = ((frontKneeAngle <= 85) || (backKneeAngle <= 90) || hipBelowFrontKnee);\n      // Standing position: both knees straight\n      const standingPosition = (frontKneeAngle >= 160) && (backKneeAngle >= 150);\n      // Simple counting: count immediately when going down (like squats)\n      if (this.pushupState === 'up') {\n        if (lungePosition) {\n          this.pushupState = 'down';\n          this.pushupCount += 1; // Count immediately on descent\n          this.playSuccessSound(); // Play success sound\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Lunge ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (standingPosition) {\n          this.pushupState = 'up'; // Reset state for next rep\n        }\n      }\n    } catch (error) {\n      console.error('Error updating lunges counter:', error);\n    }\n  }\n\n  // Add Burpees counter\n  // Update mountain climbers counter\n  updateMountainClimbersCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      \n      // Get key body points\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const rightHip = landmarks[config.RIGHT_HIP || 24];\n      const leftKnee = landmarks[config.LEFT_KNEE || 25];\n      const rightKnee = landmarks[config.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[config.RIGHT_ANKLE || 28];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n\n      // Calculate vertical distances between knees and hips\n      const leftKneeToHipY = Math.abs(leftKnee.y - leftHip.y);\n      const rightKneeToHipY = Math.abs(rightKnee.y - rightHip.y);\n\n      // Initialize states if needed\n      if (!this._lastLeftKneeY) this._lastLeftKneeY = leftKnee.y;\n      if (!this._lastRightKneeY) this._lastRightKneeY = rightKnee.y;\n      if (!this._climberState) this._climberState = 'neutral';\n      if (!this._lastClimberTime) this._lastClimberTime = Date.now();\n      \n      const KNEE_THRESHOLD = 0.05; // How far the knee needs to move\n      const MIN_REP_TIME = 250; // Minimum time between reps (ms)\n      const currentTime = Date.now();\n\n      // Calculate knee movements\n      const leftKneeMove = leftKnee.y - this._lastLeftKneeY;\n      const rightKneeMove = rightKnee.y - this._lastRightKneeY;\n\n      // Check for significant knee movements in opposite directions\n      const isAlternating = (leftKneeMove > KNEE_THRESHOLD && rightKneeMove < -KNEE_THRESHOLD) ||\n                           (leftKneeMove < -KNEE_THRESHOLD && rightKneeMove > KNEE_THRESHOLD);\n\n      // State machine for counting alternating leg movements\n      if (this._climberState === 'neutral') {\n        if (isAlternating && (currentTime - this._lastClimberTime > MIN_REP_TIME)) {\n          this._climberState = 'moving';\n          this._lastClimberTime = currentTime;\n          // Count the rep\n          this.pushupCount += 1;\n          this.playSuccessSound(); // Play success sound\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            const leg = leftKneeMove > rightKneeMove ? 'Left' : 'Right';\n            this.onFormFeedback({\n              message: `${leg} knee drive - Rep ${this.pushupCount}`,\n              type: 'success',\n              timestamp: currentTime\n            });\n          }\n        }\n      } else if (this._climberState === 'moving') {\n        if (!isAlternating) {\n          this._climberState = 'neutral';\n        }\n      }\n\n      // Update last positions\n      this._lastLeftKneeY = leftKnee.y;\n      this._lastRightKneeY = rightKnee.y;\n\n      // Form feedback for incorrect movement\n      if (Math.abs(leftHip.y - rightHip.y) > 0.1) { // Hips not level\n        if (this.onFormFeedback && Math.random() < 0.1) {\n          this.onFormFeedback({\n            message: \"Keep hips level!\",\n            type: \"warning\",\n            timestamp: currentTime\n          });\n        }\n      }\n\n    } catch (error) {\n      console.error('Error updating mountain climbers counter:', error);\n    }\n  }\n\n  updateBurpeesCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      // ŸÜŸÇÿßÿ∑ ÿßŸÑÿ±ÿ£ÿ≥ ŸàÿßŸÑŸäÿØŸäŸÜ\n      const nose = landmarks[config.NOSE || 0];\n      const leftWrist = landmarks[config.LEFT_WRIST || 15];\n      const rightWrist = landmarks[config.RIGHT_WRIST || 16];\n      const leftIndex = landmarks[config.LEFT_INDEX || 19];\n      const rightIndex = landmarks[config.RIGHT_INDEX || 20];\n      if (!nose || !leftWrist || !rightWrist) return;\n      // ÿ£ÿπŸÑŸâ ŸÜŸÇÿ∑ÿ© ŸÑŸÑÿ±ÿ£ÿ≥\n      const headY = nose.y;\n      // ÿ£ÿπŸÑŸâ ŸÜŸÇÿ∑ÿ© ŸÑŸÑŸäÿØ ÿ£Ÿà ÿßŸÑÿ£ÿµÿßÿ®ÿπ\n      const leftHandY = leftIndex ? leftIndex.y : leftWrist.y;\n      const rightHandY = rightIndex ? rightIndex.y : rightWrist.y;\n      // ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑŸäÿØŸäŸÜ ÿ£Ÿà ÿßŸÑÿ£ÿµÿßÿ®ÿπ ÿ£ÿπŸÑŸâ ŸÖŸÜ ÿßŸÑÿ±ÿ£ÿ≥ (ÿ£ŸÇŸÑ ŸÅŸä ŸÇŸäŸÖÿ© y)\n      const handsAboveHead = (leftHandY < headY && rightHandY < headY);\n      // ŸÖŸÜÿ∑ŸÇ ÿßŸÑÿπÿØ\n      if (!this._burpeeState) this._burpeeState = 'ready';\n      if (this._burpeeState === 'ready') {\n        if (handsAboveHead) {\n          this._burpeeState = 'jumping';\n          this.pushupCount += 1;\n          this.playSuccessSound(); // Play success sound\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({\n              message: `Burpee ${this.pushupCount} - Hands above head!`,\n              type: 'success',\n              timestamp: Date.now()\n            });\n          }\n        }\n      } else if (this._burpeeState === 'jumping') {\n        if (!handsAboveHead) {\n          this._burpeeState = 'ready';\n        }\n      }\n    } catch (error) {\n      console.error('Error updating burpees counter:', error);\n    }\n  }\n\n  updateHighKneesCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const rightHip = landmarks[config.RIGHT_HIP || 24];\n      const leftKnee = landmarks[config.LEFT_KNEE || 25];\n      const rightKnee = landmarks[config.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[config.RIGHT_ANKLE || 28];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n\n      // Check if knee is above hip for high knees\n      const leftKneeUp = leftKnee.y < leftHip.y;\n      const rightKneeUp = rightKnee.y < rightHip.y;\n\n      // Define thresholds for knee height relative to hip\n      const KNEE_HIP_THRESHOLD = 0.1; // Adjust as needed\n\n      // Check if knee is significantly above hip\n      const isLeftKneeHigh = (leftHip.y - leftKnee.y) > KNEE_HIP_THRESHOLD;\n      const isRightKneeHigh = (rightHip.y - rightKnee.y) > KNEE_HIP_THRESHOLD;\n\n      // State machine for counting high knees\n      if (!this._highKneesState) this._highKneesState = 'down';\n\n      if (this._highKneesState === 'down') {\n        if (isLeftKneeHigh || isRightKneeHigh) {\n          this._highKneesState = 'up';\n          this.highKneesCount += 1; // Count each time a knee goes up\n          this.playSuccessSound(); // Play success sound\n          if (this.onPushupCount) this.onPushupCount(this.highKneesCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({\n              message: `High Knee ${this.highKneesCount}`,\n              type: 'success',\n              timestamp: Date.now()\n            });\n          }\n        }\n      } else if (this._highKneesState === 'up') {\n        // Reset state when both knees are down again\n        if (!isLeftKneeHigh && !isRightKneeHigh) {\n          this._highKneesState = 'down';\n        }\n      }\n\n    } catch (error) {\n      console.error('Error updating high knees counter:', error);\n    }\n  }\n\n  // Play warning sound\n  playWarningSound() {\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n      oscillator.type = 'sine';\n      \n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 0.5);\n    } catch (error) {\n      console.error('Error playing warning sound:', error);\n    }\n  }\n\n  // Play success sound (pop.wav)\n  playSuccessSound() {\n    try {\n      const audio = new Audio('/assets/sounds/pop.wav');\n      audio.volume = 0.5; // Set volume to 50%\n      audio.play().catch(error => {\n        console.error('Error playing success sound:', error);\n      });\n    } catch (error) {\n      console.error('Error creating success sound:', error);\n    }\n  }\n\n  // Draw pose landmarks on canvas\n  drawPoseOverlay(canvasCtx, results, canvasWidth, canvasHeight) {\n    // Only log occasionally to avoid spam\n    if (Math.random() < 0.05) {\n      console.log('üé® Drawing pose overlay with', results.poseLandmarks?.length || 0, 'landmarks');\n    }\n\n    if (!results.poseLandmarks || !canvasCtx) {\n      return;\n    }\n\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    // Draw landmarks\n    const landmarks = results.poseLandmarks;\n    let drawnLandmarks = 0;\n    \n    landmarks.forEach((landmark, index) => {\n      if (landmark.visibility && landmark.visibility > 0.5) {\n        const x = landmark.x * canvasWidth;\n        const y = landmark.y * canvasHeight;\n        \n        canvasCtx.beginPath();\n        canvasCtx.arc(x, y, 6, 0, 2 * Math.PI); // Bigger circles\n        canvasCtx.fillStyle = landmark.visibility > 0.7 ? '#10B981' : '#F59E0B';\n        canvasCtx.fill();\n        canvasCtx.strokeStyle = '#FFFFFF';\n        canvasCtx.lineWidth = 2;\n        canvasCtx.stroke();\n        drawnLandmarks++;\n      }\n    });\n\n    // Only log occasionally\n    if (Math.random() < 0.1) {\n      console.log('‚ú® Drew', drawnLandmarks, 'landmarks');\n    }\n\n    // Always use basic connections (more reliable)\n    this.drawBasicConnections(canvasCtx, landmarks, canvasWidth, canvasHeight);\n\n    canvasCtx.restore();\n  }\n\n  // Draw basic pose connections\n  drawBasicConnections(canvasCtx, landmarks, canvasWidth, canvasHeight) {\n    const connections = [\n      [11, 12], // shoulders\n      [11, 13], // left shoulder to elbow\n      [13, 15], // left elbow to wrist\n      [12, 14], // right shoulder to elbow\n      [14, 16], // right elbow to wrist\n      [11, 23], // left shoulder to hip\n      [12, 24], // right shoulder to hip\n      [23, 24], // hips\n      [23, 25], // left hip to knee\n      [25, 27], // left knee to ankle\n      [24, 26], // right hip to knee\n      [26, 28]  // right knee to ankle\n    ];\n\n    let drawnConnections = 0;\n    connections.forEach(([startIdx, endIdx]) => {\n      const startPoint = landmarks[startIdx];\n      const endPoint = landmarks[endIdx];\n\n      if (startPoint && endPoint && \n          startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n        canvasCtx.beginPath();\n        canvasCtx.moveTo(startPoint.x * canvasWidth, startPoint.y * canvasHeight);\n        canvasCtx.lineTo(endPoint.x * canvasWidth, endPoint.y * canvasHeight);\n        canvasCtx.strokeStyle = '#3B82F6';\n        canvasCtx.lineWidth = 3; // Thicker lines\n        canvasCtx.stroke();\n        drawnConnections++;\n      }\n    });\n    \n    // Only log occasionally\n    if (Math.random() < 0.02) {\n      console.log('‚úÖ Drawing completed!', drawnConnections, 'connections');\n    }\n  }\n\n  // Reset counter\n  resetCounter() {\n    this.pushupCount = 0;\n    this.highKneesCount = 0;\n    this.pushupState = 'up';\n    this.postureStatus = 'unknown';\n    // Reset plank timing\n    this.accumulatedCorrectMs = 0;\n    this.timerRunning = false;\n    this.startCorrectTimestampMs = 0;\n  }\n\n  // Get current stats\n  getStats() {\n    return {\n      count: this.exerciseMode === 'highknees' ? this.highKneesCount : this.pushupCount,\n      state: this.pushupState,\n      posture: this.postureStatus,\n      timeSec: Math.floor((this.accumulatedCorrectMs + (this.timerRunning ? (Date.now() - this.startCorrectTimestampMs) : 0)) / 1000)\n    };\n  }\n\n  // Get latest pose results for drawing\n  getLastResults() {\n    return this.lastResults;\n  }\n\n  // Set callback functions\n  setCallbacks({ onPushupCount, onPostureChange, onFormFeedback, onTimeUpdate }) {\n    this.onPushupCount = onPushupCount;\n    this.onPostureChange = onPostureChange;\n    this.onFormFeedback = onFormFeedback;\n    this.onTimeUpdate = onTimeUpdate;\n  }\n\n  // Cleanup\n  cleanup() {\n    if (this.pose) {\n      this.pose.close();\n      this.pose = null;\n    }\n    this.isInitialized = false;\n  }\n}\n\nexport default PoseDetectionUtils;\n"],"names":["PoseDetectionUtils","constructor","this","pose","isInitialized","pushupState","pushupCount","highKneesCount","postureStatus","lastWarningTime","videoDimensionsLogged","exerciseMode","accumulatedCorrectMs","timerRunning","startCorrectTimestampMs","onPushupCount","onPostureChange","onFormFeedback","onTimeUpdate","setExerciseMode","mode","normalized","String","toLowerCase","includes","initialize","_a","window","Pose","attempts","Promise","resolve","setTimeout","locateFile","file","config","MediaPipeConfig","POSE_CONFIG","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","setOptions","onResults","bind","error","processFrame","videoElement","Math","random","videoWidth","videoHeight","maxWidth","maxHeight","send","image","message","results","_b","lastResults","poseLandmarks","Date","now","floor","landmarks","isPostureCorrect","checkBackAlignment","newPostureStatus","currentTime","cooldown","PLANK_CONFIG","WARNING_COOLDOWN","playWarningSound","type","timestamp","totalMs","seconds","updateSquatCounter","updateLungesCounter","updateBurpeesCounter","updateMountainClimbersCounter","updateHighKneesCounter","updatePushupCounter","calculateAngle","point1","point2","point3","radians","atan2","y","x","angle","abs","PI","_c","POSE_LANDMARKS","leftShoulder","LEFT_SHOULDER","rightShoulder","RIGHT_SHOULDER","leftHip","LEFT_HIP","rightHip","RIGHT_HIP","leftKnee","LEFT_KNEE","rightKnee","RIGHT_KNEE","leftAnkle","LEFT_ANKLE","rightAnkle","RIGHT_ANKLE","vis","p","visibility","leftSideOk","rightSideOk","shoulderCenter","hipCenter","kneeCenter","ankleCenter","targetPoint","v1","v2","isGoodPosture","cfg","leftSideVisible","rightSideVisible","shoulder","hip","ankle","sideAngle","MIN_SIDE_ANGLE","leftKneeAngle","rightKneeAngle","kneeMin","KNEE_MIN_DEG","cosSim","mag1","hypot","mag2","absCos","max","min","straightEnough","STRAIGHT_ABS_COS_MIN","dx","dy","orientDeg","horizMax","HORIZ_MAX_DEG","nearHorizontal","kneeOk","scfg","SQUAT_CONFIG","hipAngleLeft","hipAngle","hipAngleMin","HIP_ANGLE_MIN","torsoTiltDeg","tiltMax","TORSO_TILT_MAX","pushupConfig","PUSHUP_CONFIG","leftElbow","LEFT_ELBOW","leftWrist","LEFT_WRIST","rightElbow","RIGHT_ELBOW","rightWrist","RIGHT_WRIST","leftElbowAngle","avgElbowAngle","avgShoulderY","downThreshold","ELBOW_ANGLE_DOWN","upThreshold","ELBOW_ANGLE_UP","shoulderHeightThreshold","SHOULDER_HEIGHT_DOWN","pushupPosition","standingPosition","playSuccessSound","knee","kneeAngleLeft","hipY","KNEE_ANGLE_DOWN","KNEE_ANGLE_UP","kneeY","hipBelowKnee","hipAboveKnee","LUNGES_CONFIG","leftKneeBent","frontKnee","frontKneeAngle","backKneeAngle","hipBelowFrontKnee","lungePosition","_lastLeftKneeY","_lastRightKneeY","_climberState","_lastClimberTime","KNEE_THRESHOLD","MIN_REP_TIME","leftKneeMove","rightKneeMove","isAlternating","leg","nose","NOSE","leftIndex","LEFT_INDEX","rightIndex","RIGHT_INDEX","headY","leftHandY","rightHandY","handsAboveHead","_burpeeState","KNEE_HIP_THRESHOLD","isLeftKneeHigh","isRightKneeHigh","_highKneesState","audioContext","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","frequency","setValueAtTime","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","audio","Audio","volume","play","catch","drawPoseOverlay","canvasCtx","canvasWidth","canvasHeight","save","clearRect","forEach","landmark","index","beginPath","arc","fillStyle","fill","strokeStyle","lineWidth","stroke","drawBasicConnections","restore","startIdx","endIdx","startPoint","endPoint","moveTo","lineTo","resetCounter","getStats","count","state","posture","timeSec","getLastResults","setCallbacks","cleanup","close"],"mappings":"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"}